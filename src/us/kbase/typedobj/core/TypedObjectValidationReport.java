package us.kbase.typedobj.core;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Pattern;

import us.kbase.typedobj.core.ReportUtil.IdForValidation;
import us.kbase.typedobj.core.validatorconfig.WsIdRefValidationBuilder;

import com.fasterxml.jackson.databind.JsonNode;
import com.github.fge.jsonschema.report.ProcessingMessage;
import com.github.fge.jsonschema.report.ProcessingReport;


/**
 * The report generated when a typed object instance is validated.  If the type definition indicates
 * that fields are ID references, those ID references can be extracted.
 *
 */
public class TypedObjectValidationReport {

	private final static int EXPECTED_NUMBER_OF_IDS = 25;
	
	
	protected ProcessingReport processingReport;
	
	private final AbsoluteTypeDefId validationTypeDefId;
	
	private List<IdReference> idReferences;
	private boolean idRefListIsBuilt;
	
	
	public TypedObjectValidationReport(ProcessingReport processingReport, AbsoluteTypeDefId validationTypeDefId) {
		this.processingReport=processingReport;
		this.idRefListIsBuilt=false;
		this.validationTypeDefId=validationTypeDefId;
	}
	
	
	/**
	 * Get the absolute ID of the typedef that was used to validate the instance
	 */
	public AbsoluteTypeDefId getValidationTypeDefId() {
		return validationTypeDefId;
	}
	
	
	
	
	/**
	 * This method returns the raw report generated by the json schema, useful in some cases.
	 */
	public ProcessingReport getRawProcessingReport() {
		return processingReport;
	}
	
	public List<IdReference> getListOfIdReferences() {
		if(!idRefListIsBuilt) {
			buildIdList();
		}
		return idReferences;
	}
	
	
	
	@Override
	public String toString() {
		// temp hack, just return what the processing report says
		return processingReport.toString();
	}
	
	
	
	/**
	 * given the internal processing report, compute the list of IDs
	 */
	protected void buildIdList() {
		Iterator<ProcessingMessage> mssgs = processingReport.iterator();
		this.idReferences = new ArrayList<IdReference>(EXPECTED_NUMBER_OF_IDS);
		while(mssgs.hasNext()) {
			ProcessingMessage m = mssgs.next();
			if( m.getMessage().compareTo(WsIdRefValidationBuilder.keyword) != 0 ) {
				continue;
			}
			String id = m.asJson().get("id").asText();
			JsonNode typeNames = m.asJson().get("type");
			ArrayList<TypeDefId> typesList = new ArrayList<TypeDefId>(typeNames.size());
			for(int k=0; k<typeNames.size(); k++) {
				String fullName = typeNames.get(k).asText();
				typesList.add(new TypeDefId(new TypeDefName(fullName)));
			}
			//@todo reconstruct path to the node
			IdReference idRef = new IdReference("unknown",id,typesList);
			idReferences.add(idRef);
			System.out.println(idRef);
		}
		idRefListIsBuilt=true;
	}
	
	
	
	
	
	
	
	
	
}
