package us.kbase.typedobj.core;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import us.kbase.typedobj.core.validatorconfig.IdRefValidationBuilder;
import us.kbase.typedobj.exceptions.RelabelIdReferenceException;
import us.kbase.typedobj.idref.IdReference;
import us.kbase.typedobj.idref.IdReferenceManager;
import us.kbase.typedobj.idref.WsIdReference;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.github.fge.jsonschema.report.LogLevel;
import com.github.fge.jsonschema.report.ProcessingMessage;
import com.github.fge.jsonschema.report.ProcessingReport;


/**
 * The report generated when a typed object instance is validated.  If the type definition indicates
 * that fields are ID references, those ID references can be extracted from this report.  If a
 * searchable subset flag is set in the type definition, you can extract that too.
 *
 * @author msneddon
 */
public class TypedObjectValidationReport {

	/**
	 * the report object generated by the json-schema-validator library, which is the core object we are wrapping
	 */
	protected ProcessingReport processingReport;
	
	/**
	 * This is the ID of the type definition used in validation - it is an AbsoluteTypeDefId so you always have full version info
	 */
	private final AbsoluteTypeDefId validationTypeDefId;
	
	/**
	 * Used to keep track of the IDs that were parsed from the 
	 */
	private IdReferenceManager idRefManager;

	
	private JsonNode originalInstance;
	
	
	/**
	 * Initialize with the given processingReport (created when a JsonSchema is used to validate) and the
	 * typeDefId of the typed object definition used when validating.
	 * @param processingReport
	 * @param validationTypeDefId
	 */
	public TypedObjectValidationReport(ProcessingReport processingReport, AbsoluteTypeDefId validationTypeDefId, JsonNode originalInstance) {
		this.processingReport=processingReport;
		this.validationTypeDefId=validationTypeDefId;
		this.idRefManager= new IdReferenceManager(processingReport);
		this.originalInstance=originalInstance;
	}
	
	/**
	 * Get the absolute ID of the typedef that was used to validate the instance
	 * @return
	 */
	public AbsoluteTypeDefId getValidationTypeDefId() {
		return validationTypeDefId;
	}
	
	/**
	 * @return boolean true if the instance is valid, false otherwise
	 */
	public boolean isInstanceValid() {
		return processingReport.isSuccess();
	}
	
	/**
	 * Iterate over all items in the report and count the errors.
	 * @return n_errors
	 */
	public int getErrorCount() {
		if(isInstanceValid()) { return 0; }
		Iterator<ProcessingMessage> mssgs = processingReport.iterator();
		int n_errors=0;
		while(mssgs.hasNext()) {
			ProcessingMessage pm = mssgs.next();
			if(pm.getLogLevel().equals(LogLevel.ERROR)) {
				n_errors++;
			}
		}
		return n_errors;
	}
	
	/**
	 * Iterate over all items in the report and return the error messages.
	 * @return n_errors
	 */
	public List <String> getErrorMessagesAsList() {
		ArrayList <String> errMssgs = new ArrayList<String>();
		if(isInstanceValid()) { return errMssgs; }
		
		Iterator<ProcessingMessage> mssgs = processingReport.iterator();
		while(mssgs.hasNext()) {
			ProcessingMessage pm = mssgs.next();
			if(pm.getLogLevel().equals(LogLevel.ERROR)) {
				errMssgs.add(pm.getMessage());
			}
		}
		return errMssgs;
	}
	
	public String [] getErrorMessages() {
		List <String> errMssgs = getErrorMessagesAsList();
		return errMssgs.toArray(new String [errMssgs.size()]);
	}
	
	/**
	 * This method returns the raw report generated by the JsonSchema, useful in some cases if
	 * you need to dig down into the guts of keywords or to investigate why something failed.
	 */
	public ProcessingReport getRawProcessingReport() {
		return processingReport;
	}
	
	/**
	 * use getWsIdReferences() or getAllIdReferences() instead 
	 * @deprecated
	**/
	public List <String> getListOfIdReferences() {
		return idRefManager.getAllIds();
		
	}
	
	public List<WsIdReference> getWsIdReferences() {
		return idRefManager.getAllWsIdReferences();
	}
	
	public List<IdReference> getAllIdReferences() {
		return idRefManager.getAllIdReferences();
	}
	
	public List<String> getAllIds() {
		return idRefManager.getAllIds();
	}
	
	public List<IdReference> getAllIdReferencesOfType(String type) {
		return idRefManager.getAllIdReferencesOfType(type);
	}
	
	
	
	/**
	 * Use relabelWsIdReferences for relabeling ws id references from now on. You no
	 * longer need to call this method (although it still works)
	 * @deprecated
	 */
	public void setAbsoluteIdReferences(Map<String,String> absoluteIdRefMapping) {
		idRefManager.setWsReplacementNames(absoluteIdRefMapping);
	}
	
	/**
	 * Relabel the WS IDs in the original Json document based on the specified set of
	 * ID Mappings, where keys are the original ids and values are the replacement ids.
	 * 
	 * Caution: this relabeling happens in-place, so if you have modified the structure
	 * of the JSON node between validation and invocation of this method, you will likely
	 * get many runtime errors.  You should make a deep copy first if you indent to do this.
	 * 
	 * Memory of the original ids is not changed by this operation.  Thus, if you need
	 * to rename the ids a second time, you must still refer to the id as its original name,
	 * not necessarily be the name in the current version of the object.
	 */
	public JsonNode relabelWsIdReferences(Map<String,String> absoluteIdRefMapping) throws RelabelIdReferenceException {
		idRefManager.setWsReplacementNames(absoluteIdRefMapping);
		idRefManager.relabelWsIds(originalInstance);
		return originalInstance;
	}
	
	public JsonNode getJsonInstance() {
		return originalInstance;
	}
	
	
	@Override
	public String toString() {
		StringBuilder mssg = new StringBuilder();
		mssg.append("TYPED OBJECT VALIDATION REPORT\n");
		mssg.append(" -validated instance against: '"+validationTypeDefId.getTypeString()+"'\n");
		mssg.append(" -status: ");
		if(this.isInstanceValid()) {
			mssg.append("pass\n");
			mssg.append(" -id refs extracted: "+idRefManager.getAllIds().size());
			mssg.append(" -ws id refs extracted: "+idRefManager.getAllWsIdReferences().size());
		}
		else {
			List<String> errs = getErrorMessagesAsList();
			mssg.append("fail ("+errs.size()+" error(s))\n");
			for(int k=0; k<errs.size(); k++) {
				mssg.append(" -["+(k+1)+"]:"+errs.get(k));
			}
		}
		return mssg.toString();
	}
	
	
}
